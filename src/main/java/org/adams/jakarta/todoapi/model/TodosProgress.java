/*
 * My Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.adams.jakarta.todoapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * TodosProgress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-08T09:40:08.088454400+02:00[Europe/Berlin]")
public class TodosProgress {
  /**
   * Gets or Sets interval
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
  public enum IntervalEnum {
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    MONTH("MONTH");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntervalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private IntervalEnum interval;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENTAGE = "progress_percentage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENTAGE)
  private Integer progressPercentage;

  public static final String SERIALIZED_NAME_TOTAL_TODOS = "total_todos";
  @SerializedName(SERIALIZED_NAME_TOTAL_TODOS)
  private Integer totalTodos;

  public static final String SERIALIZED_NAME_COMPLETED_TODOS = "completed_todos";
  @SerializedName(SERIALIZED_NAME_COMPLETED_TODOS)
  private Integer completedTodos;

  public static final String SERIALIZED_NAME_OPEN_TODOS = "open_todos";
  @SerializedName(SERIALIZED_NAME_OPEN_TODOS)
  private Integer openTodos;

  public TodosProgress() {
  }

  public TodosProgress interval(IntervalEnum interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IntervalEnum getInterval() {
    return interval;
  }


  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }


  public TodosProgress progressPercentage(Integer progressPercentage) {
    
    this.progressPercentage = progressPercentage;
    return this;
  }

   /**
   * Get progressPercentage
   * @return progressPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProgressPercentage() {
    return progressPercentage;
  }


  public void setProgressPercentage(Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
  }


  public TodosProgress totalTodos(Integer totalTodos) {
    
    this.totalTodos = totalTodos;
    return this;
  }

   /**
   * Get totalTodos
   * @return totalTodos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTotalTodos() {
    return totalTodos;
  }


  public void setTotalTodos(Integer totalTodos) {
    this.totalTodos = totalTodos;
  }


  public TodosProgress completedTodos(Integer completedTodos) {
    
    this.completedTodos = completedTodos;
    return this;
  }

   /**
   * Get completedTodos
   * @return completedTodos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCompletedTodos() {
    return completedTodos;
  }


  public void setCompletedTodos(Integer completedTodos) {
    this.completedTodos = completedTodos;
  }


  public TodosProgress openTodos(Integer openTodos) {
    
    this.openTodos = openTodos;
    return this;
  }

   /**
   * Get openTodos
   * @return openTodos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOpenTodos() {
    return openTodos;
  }


  public void setOpenTodos(Integer openTodos) {
    this.openTodos = openTodos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TodosProgress todosProgress = (TodosProgress) o;
    return Objects.equals(this.interval, todosProgress.interval) &&
        Objects.equals(this.progressPercentage, todosProgress.progressPercentage) &&
        Objects.equals(this.totalTodos, todosProgress.totalTodos) &&
        Objects.equals(this.completedTodos, todosProgress.completedTodos) &&
        Objects.equals(this.openTodos, todosProgress.openTodos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interval, progressPercentage, totalTodos, completedTodos, openTodos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TodosProgress {\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("    totalTodos: ").append(toIndentedString(totalTodos)).append("\n");
    sb.append("    completedTodos: ").append(toIndentedString(completedTodos)).append("\n");
    sb.append("    openTodos: ").append(toIndentedString(openTodos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interval");
    openapiFields.add("progress_percentage");
    openapiFields.add("total_todos");
    openapiFields.add("completed_todos");
    openapiFields.add("open_todos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TodosProgress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TodosProgress.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TodosProgress is not found in the empty JSON string", TodosProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TodosProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TodosProgress` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TodosProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TodosProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TodosProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TodosProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<TodosProgress>() {
           @Override
           public void write(JsonWriter out, TodosProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TodosProgress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }
}

